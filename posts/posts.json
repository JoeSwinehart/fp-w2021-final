[
  {
    "path": "posts/data-cleaning-with-purrr/",
    "title": "Data cleaning with {purrr}",
    "description": "A tutorial on using {purrr} for data cleaning.",
    "author": [
      {
        "name": "Lea Frank",
        "url": {}
      }
    ],
    "date": "2021-05-13",
    "categories": [],
    "contents": "\n\nContents\nAbout the data\nBatch LoadingCreate a list with the file paths\nUse purrr::map to read files\n\nData cleaning\nMy final solution\n\nThe {purrr} package provides a number of helpful functions for loading in multiple data files and iterating data processing steps over multiple data frames. This tutorial will provide step-by-step instructions that how just how powerful the map family of functions can be.\nAbout the data\nThe data for this blog is taken from the National Health and Nutrition Examination Survey (NHANES). Each year, the survey collects information on the health and nutritional status of children and adults across the United States. For this blog, survey data was taken from the years 1999 - 2016. The data was narrowed down to the following variables of interest:\n\nVariable Code\nDescription\nSEQN\nRespondent ID\nRIDAGEYR\nAge in years at screening\nRIAGENDR\nGender\nRIDRETH1\nRace/Hispanic origin\nDMDEDUC2\nEducation level (adults 20+)\nDMDEDUC3\nEducation level (children/youth 6-19)\nHHFDSEC\nHousehold food security category over last 12 months (1999-2002)\nFSDHH\nHousehold food security category over last 12 months (2003+)\n\nThe NHANES releases yearly survey data, with files separated based on demographics, questionnaire, health examination, and nutrition data. The data for this blog were downloaded from the following links: demographics and food security questionnaire (FSQ). Documentation regarding variable coding can also be found at those links.\nBatch Loading\nThe purrr::map family of functions can be incredibly powerful when loading a large number of data files.\nCreate a list with the file paths\nhere::here is first used to define the path to the data files.\n\n\n(rootpath <- here::here(\"data\"))\n\n\n[1] \"/Users/leafrank/Documents/fp-w2021-final/data\"\n\nThe dir_ls function from the fs package creates a vector of the paths for the files listed within the rootpath.\n\n\nfnames <- fs::dir_ls(rootpath)\nhead(fnames)\n\n\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2001-2002.XPT\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2003-2004.XPT\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2005-2006.XPT\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2007-2008.XPT\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2009-2010.XPT\n\nImportantly, this vector is named with the associated paths, which will come in handy when using map_df below.\n\n\nnames(head(fnames))\n\n\n[1] \"/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\"\n[2] \"/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2001-2002.XPT\"\n[3] \"/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2003-2004.XPT\"\n[4] \"/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2005-2006.XPT\"\n[5] \"/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2007-2008.XPT\"\n[6] \"/Users/leafrank/Documents/fp-w2021-final/data/DEMO_2009-2010.XPT\"\n\nThe demographics and FSQ will be loaded separately since they will require different data cleaning steps. Regular expression can be used with the fs::dir_ls function to filter files that match a specific pattern.\n\n\ndemo_paths <- dir_ls(rootpath, regexp = \"DEMO\")\nfsq_paths <- dir_ls(rootpath, regexp = \"FSQ\")\n\n\n\nUse purrr::map to read files\nThe purrr::map family of functions allows us to iterate a function over elements of a list or vector. In this case, we want to use rio::import to read in the data files using the vectors of file paths.\nThere are two ways in which we can read in the data. The first option is to use the purrr::map function to read each data frame into a separate element of a list. This can be useful if you want to use map to iteration the same functions, like data cleaning, over each data frame.\n\n\ndemos_list <- map(demo_paths, rio::import)\nfsq_list <- map(demo_paths, rio::import)\n\n\n\nAnother option is to use purrr::map_df to read each data file into a single data frame. Importantly, this function allows you to specify the .id, which will create a variable to identify each iteration of the function. As I mentioned earlier, the fs::dir_ls function will assign names to each path. Using map_df on the named list of paths will generate a column in the data frame output that assigns the path name to each iteration of rio::import.\n\n\ndemos <- map_df(demo_paths, rio::import, .id = \"file\")\nkable(head(demos[,1:4]))\n\n\nfile\nSEQN\nSDDSRVYR\nRIDSTATR\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\n1\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\n2\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\n3\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\n4\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\n5\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT\n6\n1\n2\n\nfsq <- map_df(fsq_paths, rio::import, .id = \"file\")\nkable(head(fsq[,1:4]))\n\n\nfile\nSEQN\nFSD010\nFSD160\n/Users/leafrank/Documents/fp-w2021-final/data/FSQ_1999-2000.XPT\n1\n1\n1\n/Users/leafrank/Documents/fp-w2021-final/data/FSQ_1999-2000.XPT\n2\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/FSQ_1999-2000.XPT\n3\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/FSQ_1999-2000.XPT\n4\n2\n1\n/Users/leafrank/Documents/fp-w2021-final/data/FSQ_1999-2000.XPT\n5\n1\n2\n/Users/leafrank/Documents/fp-w2021-final/data/FSQ_1999-2000.XPT\n6\n1\n2\n\nWhile both options are valid, which one you choose will ultimately depend on what you intend to do with the output. I wanted to create a single data file that contains survey data from all years (1999-2016) that could then be shared with collaborators. For that reason, I chose to use map_dfr to create a single data frame. If instead I wanted to keep the data frames separated by year so I could more easily process and analyze the data, map would have have been the better approach.\nFor the sake of creating more content for the tutorial, let’s take a look at how map can be used to iterate data cleaning steps over a list of data frames.\nData cleaning\nLet’s start with the list of data frames for the demographics surveys (demos_list). Each element of the list contains the demographics survey data for a specific year range (e.g. 1999-2000 or 2013-2014). If we want to apply the same data cleaning steps to each data frame, we can use map to iterate those data cleaning functions to each element of the list.\nFirst, let’s start by creating a variable in each data frame for the year. For this step, we can use map2 to iterate through the file paths (demo_paths) and list of data frames (demos_list) in parallel. The year will be extracted from the file path and applied to the corresponding data frame.\nThis time, rather than using an existing function, we can create our own.\n\n\ndemos_list_clean <- map2(demo_paths, demos_list, ~{\n  .y %>% \n    mutate(year = str_extract(.x, \"\\\\d{4}-\\\\d{4}\")) \n                  # extracts the pattern that has: 4 digits-4 digits\n})\n\nkable(head(demos_list_clean[[1]][\"year\"]))\n\n\nyear\n1999-2000\n1999-2000\n1999-2000\n1999-2000\n1999-2000\n1999-2000\n\nNext, I want to select the variables of interest and rename them to something more clear. This time, I will need to return the data frame in order for it to output.\n\n\ndemos_list_clean <- map(demos_list_clean, ~{\n  .x <- .x %>% \n    select(year, SEQN, RIDAGEYR, RIAGENDR, \n         RIDRETH1, DMDEDUC2, DMDEDUC3)\n  names(.x) <- c(\"year\", \"id\",\"age\",\"gender\",\n                  \"race_ethnic\",\"educ_adult\",\"educ_child\")\n  return(.x)\n})\n\nkable(head(demos_list_clean[[1]]))\n\n\nyear\nid\nage\ngender\nrace_ethnic\neduc_adult\neduc_child\n1999-2000\n1\n2\n2\n4\nNA\nNA\n1999-2000\n2\n77\n1\n3\n5\nNA\n1999-2000\n3\n10\n2\n3\nNA\n3\n1999-2000\n4\n1\n1\n4\nNA\nNA\n1999-2000\n5\n49\n1\n3\n5\nNA\n1999-2000\n6\n19\n2\n5\nNA\n15\n\nFinally, I may want to convert some of the categorical variables into factors and add labels to the different levels.\n\n\ndemos_list_clean <- map(demos_list_clean, ~{\n  .x %>% \n    mutate(gender = factor(gender, labels = c(\"male\",\"female\")),\n           race_ethnic = factor(race_ethnic, labels = c(\"mexican-american\",\n                                                        \"other-hispanic\",\n                                                        \"non-hispanic-white\",\n                                                        \"non-hispanic-black\",\n                                                        \"other-race\")))\n})\n\nkable(head(demos_list_clean[[1]]))\n\n\nyear\nid\nage\ngender\nrace_ethnic\neduc_adult\neduc_child\n1999-2000\n1\n2\nfemale\nnon-hispanic-black\nNA\nNA\n1999-2000\n2\n77\nmale\nnon-hispanic-white\n5\nNA\n1999-2000\n3\n10\nfemale\nnon-hispanic-white\nNA\n3\n1999-2000\n4\n1\nmale\nnon-hispanic-black\nNA\nNA\n1999-2000\n5\n49\nmale\nnon-hispanic-white\n5\nNA\n1999-2000\n6\n19\nfemale\nother-race\nNA\n15\n\nThese steps can all be combined to produce the following code:\n\n\ndemos_list_clean <- map2(demo_paths, demos_list, ~{\n  .y <- .y %>% \n    mutate(year = str_extract(.x, \"\\\\d{4}-\\\\d{4}\"),\n           RIAGENDR = factor(RIAGENDR, labels = c(\"male\",\"female\")),\n           RIDRETH1 = factor(RIDRETH1, labels = c(\"mexican-american\",\n                                                        \"other-hispanic\",\n                                                        \"non-hispanic-white\",\n                                                        \"non-hispanic-black\",\n                                                        \"other-race\"))) %>% \n    select(year, SEQN, RIDAGEYR, RIAGENDR, \n         RIDRETH1, DMDEDUC2, DMDEDUC3)\n  names(.y) <- c(\"year\", \"id\",\"age\",\"gender\",\n                  \"race_ethnic\",\"educ_adult\",\"educ_child\")\n  return(.y)\n})\n\nstr(demos_list_clean[1:3])\n\n\nList of 3\n $ /Users/leafrank/Documents/fp-w2021-final/data/DEMO_1999-2000.XPT:'data.frame':   9965 obs. of  7 variables:\n  ..$ year       : chr [1:9965] \"1999-2000\" \"1999-2000\" \"1999-2000\" \"1999-2000\" ...\n  ..$ id         : num [1:9965] 1 2 3 4 5 6 7 8 9 10 ...\n  .. ..- attr(*, \"label\")= chr \"Respondent sequence number\"\n  ..$ age        : num [1:9965] 2 77 10 1 49 19 59 13 11 43 ...\n  .. ..- attr(*, \"label\")= chr \"Age at Screening Adjudicated - Recode\"\n  ..$ gender     : Factor w/ 2 levels \"male\",\"female\": 2 1 2 1 1 2 2 1 2 1 ...\n  ..$ race_ethnic: Factor w/ 5 levels \"mexican-american\",..: 4 3 3 4 3 5 4 3 4 4 ...\n  ..$ educ_adult : num [1:9965] NA 5 NA NA 5 NA 2 NA NA 3 ...\n  .. ..- attr(*, \"label\")= chr \"Education Level - Adults 20+\"\n  ..$ educ_child : num [1:9965] NA NA 3 NA NA 15 NA 5 5 NA ...\n  .. ..- attr(*, \"label\")= chr \"Education Level - Children/Youth 6-19\"\n $ /Users/leafrank/Documents/fp-w2021-final/data/DEMO_2001-2002.XPT:'data.frame':   11039 obs. of  7 variables:\n  ..$ year       : chr [1:11039] \"2001-2002\" \"2001-2002\" \"2001-2002\" \"2001-2002\" ...\n  ..$ id         : num [1:11039] 9966 9967 9968 9969 9970 ...\n  .. ..- attr(*, \"label\")= chr \"Respondent sequence number\"\n  ..$ age        : num [1:11039] 39 23 84 51 16 14 44 63 13 80 ...\n  .. ..- attr(*, \"label\")= chr \"Age at Screening Adjudicated - Recode\"\n  ..$ gender     : Factor w/ 2 levels \"male\",\"female\": 1 1 2 2 1 2 1 2 1 1 ...\n  ..$ race_ethnic: Factor w/ 5 levels \"mexican-american\",..: 3 4 3 3 2 2 3 1 4 3 ...\n  ..$ educ_adult : num [1:11039] 4 4 2 5 NA NA 3 2 NA 4 ...\n  .. ..- attr(*, \"label\")= chr \"Education Level - Adults 20+\"\n  ..$ educ_child : num [1:11039] NA NA NA NA 10 9 NA NA 6 NA ...\n  .. ..- attr(*, \"label\")= chr \"Education Level - Children/Youth 6-19\"\n $ /Users/leafrank/Documents/fp-w2021-final/data/DEMO_2003-2004.XPT:'data.frame':   10122 obs. of  7 variables:\n  ..$ year       : chr [1:10122] \"2003-2004\" \"2003-2004\" \"2003-2004\" \"2003-2004\" ...\n  ..$ id         : num [1:10122] 21005 21006 21007 21008 21009 ...\n  .. ..- attr(*, \"label\")= chr \"Respondent sequence number\"\n  ..$ age        : num [1:10122] 19 16 14 17 55 52 0 63 13 3 ...\n  .. ..- attr(*, \"label\")= chr \"Age at Screening Adjudicated - Recode\"\n  ..$ gender     : Factor w/ 2 levels \"male\",\"female\": 1 2 2 1 1 2 1 1 2 1 ...\n  ..$ race_ethnic: Factor w/ 5 levels \"mexican-american\",..: 4 4 3 4 3 3 1 4 4 4 ...\n  ..$ educ_adult : num [1:10122] NA NA NA NA 3 4 NA 3 NA NA ...\n  .. ..- attr(*, \"label\")= chr \"Education Level - Adults 20+\"\n  ..$ educ_child : num [1:10122] 11 11 8 10 NA NA NA NA 6 NA ...\n  .. ..- attr(*, \"label\")= chr \"Education Level - Children/Youth 6-19\"\n\nMy final solution\nAs I mentioned earlier, the best route for me was to read the data files into a single data frame. The same data cleaning steps conducted above can then be applied to the single data frame.\n\n\ndemos <- dir_ls(rootpath, \n                 regexp = \"DEMO\") %>% \n  map_dfr(rio::import, .id = \"file\") %>% \n  mutate(year = str_extract(file, \"\\\\d{4}-\\\\d{4}\"),\n         RIAGENDR = factor(RIAGENDR, labels = c(\"male\",\"female\")),\n         RIDRETH1 = factor(RIDRETH1, labels = c(\"mexican-american\",\n                                                \"other-hispanic\",\n                                                \"non-hispanic-white\",\n                                                \"non-hispanic-black\",\n                                                \"other-race\"))) %>% \n  select(year, SEQN, RIDAGEYR, RIAGENDR, \n         RIDRETH1, DMDEDUC2, DMDEDUC3)\nnames(demos) <- c(\"year\", \"id\",\"age\",\"gender\",\n                  \"race_ethnic\",\"educ_adult\",\"educ_child\") \n\nfsq <- dir_ls(rootpath, \n                 regexp = \"FSQ\") %>% \n  map_dfr(rio::import, .id = \"file\") %>% \n  mutate(year = str_extract(file, \"\\\\d{4}-\\\\d{4}\"),\n         hh_food_secure = ifelse(year == \"1999-2000\" | year == \"2001-2002\", \n                                 HHFDSEC, FSDHH)) %>% \n  select(year, SEQN, hh_food_secure)\nnames(fsq)[2] <- \"id\"\n\n\n\nAfter creating data frames for the demographics and FSQ data, they were then joined by the year and id.\n\n\ndf <- left_join(demos, fsq)\nkable(head(df))\n\n\nyear\nid\nage\ngender\nrace_ethnic\neduc_adult\neduc_child\nhh_food_secure\n1999-2000\n1\n2\nfemale\nnon-hispanic-black\nNA\nNA\n1\n1999-2000\n2\n77\nmale\nnon-hispanic-white\n5\nNA\n1\n1999-2000\n3\n10\nfemale\nnon-hispanic-white\nNA\n3\n1\n1999-2000\n4\n1\nmale\nnon-hispanic-black\nNA\nNA\n4\n1999-2000\n5\n49\nmale\nnon-hispanic-white\n5\nNA\n1\n1999-2000\n6\n19\nfemale\nother-race\nNA\n15\n1\n\nFinally, the data frame was saved into a single .csv file that could then be shared with collaborators.\n\n\nwrite_csv(df, str_c(rootpath,\"/nhanes_1999-2016.csv\"))\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-05-18T13:48:12-07:00",
    "input_file": {}
  },
  {
    "path": "posts/looping/",
    "title": "Looping",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Meg Siritzky",
        "url": {}
      }
    ],
    "date": "2021-05-13",
    "categories": [],
    "contents": "\nThe question we’re trying to answer is what is the change in the relationship between age and percentage of the population experiencing food insecurity over time.\nFirst we’ll import our data using the here package.\n\n\nfi <- import(here(\"data\", \"nhanes_1999-2016.csv\"))\n\n\n\nNext, we’re going to convert the food insecurity variable to a factor, rename the levels, and remove NAs.\n\n\nfi_factor <- fi %>% \n  mutate(security = as_factor(hh_food_secure)) %>% \n  mutate(security = case_when(\n    security == \"1\" ~ \"full food security\",\n    security == \"2\" ~ \"marginal food security\",\n    security == \"3\" ~ \"low food security\",\n    security == \"4\" ~ \"very low food security\")) %>% \n  filter(security != is.na(security))\n\n\n\nWe want to get the percentage of the population that falls in each food security group at each time point, so we’re going to first count the number of people in each group in each year and the population in each year, and then create a new column called percent_insecurity that has the percentage of people in the population that report that level of food security.\n\n\nfi_factor <- fi_factor %>% \n  add_count(year, name = \"pop\") %>% \n  add_count(year, security, name = \"ct\") %>% \n  dplyr::select(year, security, age, pop, ct) %>% \n  mutate(pop = as.numeric(pop),\n         ct = as.numeric(ct),\n         percent_insecurity = ct/pop)\n\n\n\nNow we use the group_by and nest functions to create a nested data frame that groups our data by year and level of food insecurity.\n\n\nfi_grouped <- fi_factor %>% \n  group_by(year, security) %>% \n  nest()\n\n\n\nWe’re want to look at the linear relationship between age and percent of food insecurity over time. To do this, we fit a linear regression model predicting food insecurity from age using map. We can then extract the intercepts and slopes of each model using map_dbl. I’m going to want to use our percent_insecurity variable later, so to move it from a nested list to the main data frame, I unnest the data list and then save that column.\n\n\nfi_grouped_lm <- fi_grouped %>% \n  mutate(m1 = map(data, ~lm(percent_insecurity ~ age, data = .x)),\n         coefs = map(m1, coefficients),\n         intercept = map_dbl(coefs, 1),\n         slope = map_dbl(coefs, 2)) %>% \n  unnest(data) %>% \n  dplyr::select(year, security, intercept, slope, percent_insecurity)\n\n\n\nNow we want to look at the change in slope of how age predicts food insecurity across time. So I’m creating a line graph where the x axis is year and the y-axis is slope, and I’m visualizing to see the change in slope over time. I’m using the pmap and list functions to create a new list in our nested data frame with a plot for each level of food security.\n\n\nfi_grouped_plots <- fi_grouped_lm %>%\n  group_by(security) %>%\n  nest() %>%\n  mutate(plot = pmap(list(security, data), ~{\n    ggplot(..2, aes(year, slope)) +\n      geom_point() +\n      geom_line() +\n      labs(title = glue(\"Slope of relation between age and {.x} by year\"),\n           x = \"Year\",\n           y = \"Slope\")\n    })\n    )\n\n\n\nHere’s an example of one of the plots.\n\n\nfi_grouped_plots$plot[[2]]\n\n\n\n\nNow I’m going to export a plot for each level of food security using walk2.\n\n\nfs::dir_create(here::here(\"plots\", \"slope_plots\"))\nfood_security_groups <- str_replace_all(tolower(fi_grouped_plots$security), \" \", \"-\")\npaths <- here::here(\"plots\", \"slope_plots\", glue(\"age_{food_security_groups}.png\"))\n\nwalk2(paths, fi_grouped_plots$plot, ggsave,\n      width = 9.5, \n      height = 6.5,\n      dpi = 500)\n\n\n\nNow I want to look at the change in percent of different levels of food security across time. So, again, I’m using the the pmap and list functions to create a new list in our nested data frame with bar graphs where the x axis is year and the y-axis is percent of food security.\n\n\nfi_grouped_plots_2 <- fi_grouped_lm %>%\n  group_by(security) %>%\n  nest() %>%\n  mutate(plot = pmap(list(security, data), ~{\n    ggplot(..2, aes(year, percent_insecurity)) +\n      geom_point() +\n      labs(title = glue(\"Percent of {.x} in the population by year\"),\n           x = \"Year\",\n           y = \"Percent\")\n    })\n    )\n\n\n\nHere’s an example of one of the plots.\n\n\nfi_grouped_plots_2$plot[[2]]\n\n\n\n\nAgain, I’m going to export a plot for each level of food security using walk2.\n\n\nfs::dir_create(here::here(\"plots\", \"percent_plots\"))\npaths_2 <- here::here(\"plots\", \"percent_plots\", glue(\"percent_{food_security_groups}.png\"))\n\nwalk2(paths_2, fi_grouped_plots_2$plot, ggsave,\n      width = 9.5, \n      height = 6.5,\n      dpi = 500)\n\n\n\n\n\n\n",
    "preview": "posts/looping/looping_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-05-19T14:05:20-04:00",
    "input_file": "looping.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/parallel-iteration/",
    "title": "Parallel Iteration",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Lea Frank",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-05-13",
    "categories": [],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-05-14T14:50:36-07:00",
    "input_file": {}
  },
  {
    "path": "posts/writing-functions/",
    "title": "Writing Functions",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Sarah Dimakis",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-05-13",
    "categories": [],
    "contents": "\nDistill is a publication format for scientific and technical writing, native to the web.\nLearn more about using Distill at https://rstudio.github.io/distill.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-05-14T14:50:36-07:00",
    "input_file": {}
  }
]
